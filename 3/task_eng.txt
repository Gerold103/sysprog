------------------------------------------------------------------
File system.
Language: C.
Deadline: 3 weeks.
Complexity: ~7 hours on average, 520 lines of code.
------------------------------------------------------------------

Read the whole description. It contains not only the task, but
also hints and some educative materials, time estimations, rules,
points out the common mistakes, and suggests bonus tasks.

-------------------------- Description ---------------------------

Need to implement own file system in memory. Don't be afraid, it
is not too complex. For start you are given a template of the FS
interface with some pre-implemented structures, in files userfs.h
and userfs.c.

The file system is called UserFS, and it is very primitive. It has
no folders - all files are in "root". Files can be created,
deleted, opened, closed. Each file's structure is similar to the
file system FAT: it is a block list. In userfs.c you can look up
structures which describe a block and a file storing a list of
blocks.

Nothing is stored on disk - all is in the main memory, on the
heap. Files can be read/written-to by their descriptors. API
strongly resembles the one from libc. You can read it fully in
userfs.h.

The task is to implement this API in the way how it is explained
in the comments in userfs.h.

----------------------------- Rules ------------------------------

- Need to strictly follow the behaviour of each function explained
  in userfs.h comments.

-------------------------- Restrictions --------------------------

- userfs.h can not be changed except for enabling the bonus
  tasks, see them below.

- It is not allowed to copy the source and target buffers in
  ufs_read/write() byte by byte. You must use memcpy() to fill the
  blocks up and to read them, multiple bytes at once.

- The tests can not be changed.

- Global variables are not allowed (except for the already
  existing ones).

- Memory leaks are not allowed. To check them you can use
  utils/heap_help tool. Showing zero leak reports from Valgrind or
  ASAN is not enough - they often miss the leaks.

-------------------------- Relaxations ---------------------------

- Can assume that all the data fits into the main memory and
  memory allocation functions (like malloc()) never fail.

----------------------- Possible solutions -----------------------

- 15 points: implement all functions from userfs.h.

- +5 points: implement file opening modes: for reading, writing,
  reading-and-writing. See NEED_OPEN_FLAGS in userfs.h and in the
  tests. A file descriptor opened for reading can not be used for
  writing. And vice-versa. By default the file has to be opened in
  read-write mode.

- +5 points: implement file resize. See NEED_RESIZE in userfs.h.

The additional options for +5 points do not include each other.
That is, you can do none, or do only one, or do only another, or
both for +10.

--------------------------- Complexity ---------------------------

How much time and effort it would take to do this task. The
numbers might help you with planning. They are are gathered on the
people who completed the task at least with the minimal points.

- Lines of code: 330-640, average 520.

- Required total time:
  * Advanced level: ~4 hours.
  * Average:        ~7 hours.
  * Struggling:    ~10 hours and more.

- Time distribution: the coding and debugging seem to be rather
  even. The task is reported to be easy to understand and to code,
  the debugging is relatively simple.

----------------------- Advices and hints ------------------------

- When running the tests with heap_help, be aware that some tests
  will run very long. To bypass that you can temporary increase
  the BLOCK_SIZE of your files to something like 4096. It will
  speed the tests up a lot and you can then check the leaks.

  But the default block size must work fine without heap_help.

- Below are a few examples and suggestions on your possible
  implementation strategy.

Your main tasks are - 1) implement file growth when new data is
being written, 2) implement a file descriptor. Lets inspect a
couple of examples.

There is code:

        int fd = ufs_open("any_file_name", UFS_CREATE);

After this line inside userfs.c is created a struct file with a
name "any_file_name", if it doesn't exist yet. Then is created a
file descriptor struct filedesc.

        const char *data = "bla bla bla";
        ufs_write(fd, data, strlen(data));

The file is empty, it has no blocks, so you have to allocate the
needed number of struct blocks. In this case it is just 1. The
data is copied into there. The file looks like this now:

        file:
        +---------------------+
        | bla bla bla|        | -> NULL.
        +---------------------+
                     ^
                  filedesc - descriptor points here. For example,
                             in the descriptor you can store a
                             block number and offset in it.

Then I keep writing but more data this time:

        char buf[1024];
        memset(buf, 0, sizeof(buf));
        ufs_write(fd, buf, sizeof(buf));

This is how it looks now:

        file:
        +---------------------+    +---------------------+
        | bla bla bla 0 0 0 0 | -> | 0 0 0 0 0 0 0 0 0 0 | ->
        +---------------------+    +---------------------+

        +---------------------+
     -> | 0 0 0 0 0 0|        | -> NULL.
        +---------------------+
                     ^
                  filedesc

The first block was filled to the end, and 2 new blocks were
created. They were just appended to the end of the list.

Same with the reading - the descriptor reads sequentially, jumping
to the next block when the previous one is fully read.
